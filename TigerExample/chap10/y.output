State 20 conflicts: 1 shift/reduce
State 33 conflicts: 1 shift/reduce
State 36 conflicts: 1 shift/reduce
State 89 conflicts: 13 shift/reduce
State 90 conflicts: 12 shift/reduce
State 117 conflicts: 12 shift/reduce
State 124 conflicts: 12 shift/reduce
State 134 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: lvalue
    3    | funcall
    4    | lvalue ASSIGN exp
    5    | NIL
    6    | seq
    7    | INT
    8    | DOUBLE
    9    | STRING
   10    | LET decs IN explist END
   11    | IF exp THEN exp ELSE exp
   12    | IF exp THEN exp
   13    | exp PLUS exp
   14    | exp MINUS exp
   15    | exp TIMES exp
   16    | exp DIVIDE exp
   17    | exp EQ exp
   18    | MINUS exp
   19    | exp NEQ exp
   20    | exp GT exp
   21    | exp LT exp
   22    | exp GE exp
   23    | exp LE exp
   24    | exp AND exp
   25    | exp OR exp
   26    | record
   27    | array
   28    | WHILE exp DO exp
   29    | FOR id ASSIGN exp TO exp DO exp
   30    | BREAK

   31 seq: LPAREN explist RPAREN

   32 record: id LBRACE refields RBRACE

   33 refields: id EQ exp COMMA refields
   34         | id EQ exp
   35         | /* empty */

   36 array: id LBRACK exp RBRACK OF exp

   37 decs: dec decs
   38     | /* empty */

   39 dec: tydecs
   40    | vardec
   41    | fundecs

   42 tydecs: tydec tydecs
   43       | tydec

   44 tydec: TYPE id EQ ty

   45 ty: id
   46   | LBRACE typefields RBRACE
   47   | ARRAY OF id

   48 typefields: id COLON id COMMA typefields
   49           | id COLON id
   50           | /* empty */

   51 vardec: VAR id ASSIGN exp
   52       | VAR id COLON id ASSIGN exp

   53 fundecs: fundec fundecs
   54        | fundec

   55 fundec: FUNCTION id LPAREN typefields RPAREN EQ exp
   56       | FUNCTION id LPAREN typefields RPAREN COLON id EQ exp

   57 explist: exp SEMICOLON explist
   58        | exp
   59        | /* empty */

   60 lvalue: id
   61       | lvalue DOT id
   62       | id LBRACK exp RBRACK
   63       | lvalue LBRACK exp RBRACK

   64 funcall: id LPAREN args RPAREN

   65 args: exp COMMA args
   66     | exp
   67     | /* empty */

   68 id: ID


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 68
STRING (259) 9
INT (260) 7
DOUBLE (261) 8
ASSIGN (262) 4 29 51 52
OR (263) 25
AND (264) 24
GE (265) 22
GT (266) 20
LE (267) 23
LT (268) 21
NEQ (269) 19
EQ (270) 17 33 34 44 55 56
MINUS (271) 14 18
PLUS (272) 13
DIVIDE (273) 16
TIMES (274) 15
UMINUS (275)
COMMA (276) 33 48 65
COLON (277) 48 49 52 56
SEMICOLON (278) 57
LPAREN (279) 31 55 56 64
RPAREN (280) 31 55 56 64
LBRACK (281) 36 62 63
RBRACK (282) 36 62 63
LBRACE (283) 32 46
RBRACE (284) 32 46
DOT (285) 61
ARRAY (286) 47
IF (287) 11 12
THEN (288) 11 12
ELSE (289) 11
WHILE (290) 28
FOR (291) 29
TO (292) 29
DO (293) 28 29
LET (294) 10
IN (295) 10
END (296) 10
OF (297) 36 47
BREAK (298) 30
NIL (299) 5
FUNCTION (300) 55 56
VAR (301) 51 52
TYPE (302) 44


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0
exp (50)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28 29 30, on right: 1 4 11 12 13 14 15 16 17 18
    19 20 21 22 23 24 25 28 29 33 34 36 51 52 55 56 57 58 62 63 65
    66
seq (51)
    on left: 31, on right: 6
record (52)
    on left: 32, on right: 26
refields (53)
    on left: 33 34 35, on right: 32 33
array (54)
    on left: 36, on right: 27
decs (55)
    on left: 37 38, on right: 10 37
dec (56)
    on left: 39 40 41, on right: 37
tydecs (57)
    on left: 42 43, on right: 39 42
tydec (58)
    on left: 44, on right: 42 43
ty (59)
    on left: 45 46 47, on right: 44
typefields (60)
    on left: 48 49 50, on right: 46 48 55 56
vardec (61)
    on left: 51 52, on right: 40
fundecs (62)
    on left: 53 54, on right: 41 53
fundec (63)
    on left: 55 56, on right: 53 54
explist (64)
    on left: 57 58 59, on right: 10 31 57
lvalue (65)
    on left: 60 61 62 63, on right: 2 4 61 63
funcall (66)
    on left: 64, on right: 3
args (67)
    on left: 65 66 67, on right: 64 65
id (68)
    on left: 68, on right: 29 32 33 34 36 44 45 47 48 49 51 52 55 56
    60 61 62 64


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    program  go to state 13
    exp      go to state 14
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 1

   68 id: ID .

    $default  reduce using rule 68 (id)


state 2

    9 exp: STRING .

    $default  reduce using rule 9 (exp)


state 3

    7 exp: INT .

    $default  reduce using rule 7 (exp)


state 4

    8 exp: DOUBLE .

    $default  reduce using rule 8 (exp)


state 5

   18 exp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 21
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 6

   31 seq: LPAREN . explist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    $default  reduce using rule 59 (explist)

    exp      go to state 22
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    explist  go to state 23
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 7

   11 exp: IF . exp THEN exp ELSE exp
   12    | IF . exp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 24
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 8

   28 exp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 25
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 9

   29 exp: FOR . id ASSIGN exp TO exp DO exp

    ID  shift, and go to state 1

    id  go to state 26


state 10

   10 exp: LET . decs IN explist END

    FUNCTION  shift, and go to state 27
    VAR       shift, and go to state 28
    TYPE      shift, and go to state 29

    $default  reduce using rule 38 (decs)

    decs     go to state 30
    dec      go to state 31
    tydecs   go to state 32
    tydec    go to state 33
    vardec   go to state 34
    fundecs  go to state 35
    fundec   go to state 36


state 11

   30 exp: BREAK .

    $default  reduce using rule 30 (exp)


state 12

    5 exp: NIL .

    $default  reduce using rule 5 (exp)


state 13

    0 $accept: program . $end

    $end  shift, and go to state 37


state 14

    1 program: exp .
   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 1 (program)


state 15

    6 exp: seq .

    $default  reduce using rule 6 (exp)


state 16

   26 exp: record .

    $default  reduce using rule 26 (exp)


state 17

   27 exp: array .

    $default  reduce using rule 27 (exp)


state 18

    2 exp: lvalue .
    4    | lvalue . ASSIGN exp
   61 lvalue: lvalue . DOT id
   63       | lvalue . LBRACK exp RBRACK

    ASSIGN  shift, and go to state 50
    LBRACK  shift, and go to state 51
    DOT     shift, and go to state 52

    $default  reduce using rule 2 (exp)


state 19

    3 exp: funcall .

    $default  reduce using rule 3 (exp)


state 20

   32 record: id . LBRACE refields RBRACE
   36 array: id . LBRACK exp RBRACK OF exp
   60 lvalue: id .
   62       | id . LBRACK exp RBRACK
   64 funcall: id . LPAREN args RPAREN

    LPAREN  shift, and go to state 53
    LBRACK  shift, and go to state 54
    LBRACE  shift, and go to state 55

    LBRACK    [reduce using rule 60 (lvalue)]
    $default  reduce using rule 60 (lvalue)


state 21

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   18    | MINUS exp .
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    $default  reduce using rule 18 (exp)


state 22

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   57 explist: exp . SEMICOLON explist
   58        | exp .

    OR         shift, and go to state 38
    AND        shift, and go to state 39
    GE         shift, and go to state 40
    GT         shift, and go to state 41
    LE         shift, and go to state 42
    LT         shift, and go to state 43
    NEQ        shift, and go to state 44
    EQ         shift, and go to state 45
    MINUS      shift, and go to state 46
    PLUS       shift, and go to state 47
    DIVIDE     shift, and go to state 48
    TIMES      shift, and go to state 49
    SEMICOLON  shift, and go to state 56

    $default  reduce using rule 58 (explist)


state 23

   31 seq: LPAREN explist . RPAREN

    RPAREN  shift, and go to state 57


state 24

   11 exp: IF exp . THEN exp ELSE exp
   12    | IF exp . THEN exp
   13    | exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49
    THEN    shift, and go to state 58


state 25

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   28    | WHILE exp . DO exp

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49
    DO      shift, and go to state 59


state 26

   29 exp: FOR id . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 60


state 27

   55 fundec: FUNCTION . id LPAREN typefields RPAREN EQ exp
   56       | FUNCTION . id LPAREN typefields RPAREN COLON id EQ exp

    ID  shift, and go to state 1

    id  go to state 61


state 28

   51 vardec: VAR . id ASSIGN exp
   52       | VAR . id COLON id ASSIGN exp

    ID  shift, and go to state 1

    id  go to state 62


state 29

   44 tydec: TYPE . id EQ ty

    ID  shift, and go to state 1

    id  go to state 63


state 30

   10 exp: LET decs . IN explist END

    IN  shift, and go to state 64


state 31

   37 decs: dec . decs

    FUNCTION  shift, and go to state 27
    VAR       shift, and go to state 28
    TYPE      shift, and go to state 29

    $default  reduce using rule 38 (decs)

    decs     go to state 65
    dec      go to state 31
    tydecs   go to state 32
    tydec    go to state 33
    vardec   go to state 34
    fundecs  go to state 35
    fundec   go to state 36


state 32

   39 dec: tydecs .

    $default  reduce using rule 39 (dec)


state 33

   42 tydecs: tydec . tydecs
   43       | tydec .

    TYPE  shift, and go to state 29

    TYPE      [reduce using rule 43 (tydecs)]
    $default  reduce using rule 43 (tydecs)

    tydecs  go to state 66
    tydec   go to state 33


state 34

   40 dec: vardec .

    $default  reduce using rule 40 (dec)


state 35

   41 dec: fundecs .

    $default  reduce using rule 41 (dec)


state 36

   53 fundecs: fundec . fundecs
   54        | fundec .

    FUNCTION  shift, and go to state 27

    FUNCTION  [reduce using rule 54 (fundecs)]
    $default  reduce using rule 54 (fundecs)

    fundecs  go to state 67
    fundec   go to state 36


state 37

    0 $accept: program $end .

    $default  accept


state 38

   25 exp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 68
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 39

   24 exp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 69
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 40

   22 exp: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 70
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 41

   20 exp: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 71
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 42

   23 exp: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 72
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 43

   21 exp: exp LT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 73
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 44

   19 exp: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 74
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 45

   17 exp: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 75
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 46

   14 exp: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 76
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 47

   13 exp: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 77
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 48

   16 exp: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 78
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 49

   15 exp: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 79
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 50

    4 exp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 80
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 51

   63 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 81
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 52

   61 lvalue: lvalue DOT . id

    ID  shift, and go to state 1

    id  go to state 82


state 53

   64 funcall: id LPAREN . args RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    $default  reduce using rule 67 (args)

    exp      go to state 83
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    args     go to state 84
    id       go to state 20


state 54

   36 array: id LBRACK . exp RBRACK OF exp
   62 lvalue: id LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 85
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 55

   32 record: id LBRACE . refields RBRACE

    ID  shift, and go to state 1

    $default  reduce using rule 35 (refields)

    refields  go to state 86
    id        go to state 87


state 56

   57 explist: exp SEMICOLON . explist

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    $default  reduce using rule 59 (explist)

    exp      go to state 22
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    explist  go to state 88
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 57

   31 seq: LPAREN explist RPAREN .

    $default  reduce using rule 31 (seq)


state 58

   11 exp: IF exp THEN . exp ELSE exp
   12    | IF exp THEN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 89
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 59

   28 exp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 90
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 60

   29 exp: FOR id ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 91
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 61

   55 fundec: FUNCTION id . LPAREN typefields RPAREN EQ exp
   56       | FUNCTION id . LPAREN typefields RPAREN COLON id EQ exp

    LPAREN  shift, and go to state 92


state 62

   51 vardec: VAR id . ASSIGN exp
   52       | VAR id . COLON id ASSIGN exp

    ASSIGN  shift, and go to state 93
    COLON   shift, and go to state 94


state 63

   44 tydec: TYPE id . EQ ty

    EQ  shift, and go to state 95


state 64

   10 exp: LET decs IN . explist END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    $default  reduce using rule 59 (explist)

    exp      go to state 22
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    explist  go to state 96
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 65

   37 decs: dec decs .

    $default  reduce using rule 37 (decs)


state 66

   42 tydecs: tydec tydecs .

    $default  reduce using rule 42 (tydecs)


state 67

   53 fundecs: fundec fundecs .

    $default  reduce using rule 53 (fundecs)


state 68

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   25    | exp OR exp .

    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 25 (exp)


state 69

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   24    | exp AND exp .
   25    | exp . OR exp

    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 24 (exp)


state 70

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   22    | exp GE exp .
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    GE   error (nonassociative)
    GT   error (nonassociative)
    LE   error (nonassociative)
    LT   error (nonassociative)
    NEQ  error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 22 (exp)


state 71

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   20    | exp GT exp .
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    GE   error (nonassociative)
    GT   error (nonassociative)
    LE   error (nonassociative)
    LT   error (nonassociative)
    NEQ  error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 20 (exp)


state 72

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   23    | exp LE exp .
   24    | exp . AND exp
   25    | exp . OR exp

    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    GE   error (nonassociative)
    GT   error (nonassociative)
    LE   error (nonassociative)
    LT   error (nonassociative)
    NEQ  error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 23 (exp)


state 73

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   21    | exp LT exp .
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    GE   error (nonassociative)
    GT   error (nonassociative)
    LE   error (nonassociative)
    LT   error (nonassociative)
    NEQ  error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 21 (exp)


state 74

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   19    | exp NEQ exp .
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    GE   error (nonassociative)
    GT   error (nonassociative)
    LE   error (nonassociative)
    LT   error (nonassociative)
    NEQ  error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 19 (exp)


state 75

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   17    | exp EQ exp .
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    GE   error (nonassociative)
    GT   error (nonassociative)
    LE   error (nonassociative)
    LT   error (nonassociative)
    NEQ  error (nonassociative)
    EQ   error (nonassociative)

    $default  reduce using rule 17 (exp)


state 76

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   14    | exp MINUS exp .
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 14 (exp)


state 77

   13 exp: exp . PLUS exp
   13    | exp PLUS exp .
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 13 (exp)


state 78

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   16    | exp DIVIDE exp .
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    $default  reduce using rule 16 (exp)


state 79

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   15    | exp TIMES exp .
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    $default  reduce using rule 15 (exp)


state 80

    4 exp: lvalue ASSIGN exp .
   13    | exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 4 (exp)


state 81

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   63 lvalue: lvalue LBRACK exp . RBRACK

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49
    RBRACK  shift, and go to state 97


state 82

   61 lvalue: lvalue DOT id .

    $default  reduce using rule 61 (lvalue)


state 83

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   65 args: exp . COMMA args
   66     | exp .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49
    COMMA   shift, and go to state 98

    $default  reduce using rule 66 (args)


state 84

   64 funcall: id LPAREN args . RPAREN

    RPAREN  shift, and go to state 99


state 85

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   36 array: id LBRACK exp . RBRACK OF exp
   62 lvalue: id LBRACK exp . RBRACK

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49
    RBRACK  shift, and go to state 100


state 86

   32 record: id LBRACE refields . RBRACE

    RBRACE  shift, and go to state 101


state 87

   33 refields: id . EQ exp COMMA refields
   34         | id . EQ exp

    EQ  shift, and go to state 102


state 88

   57 explist: exp SEMICOLON explist .

    $default  reduce using rule 57 (explist)


state 89

   11 exp: IF exp THEN exp . ELSE exp
   12    | IF exp THEN exp .
   13    | exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49
    ELSE    shift, and go to state 103

    OR        [reduce using rule 12 (exp)]
    AND       [reduce using rule 12 (exp)]
    GE        [reduce using rule 12 (exp)]
    GT        [reduce using rule 12 (exp)]
    LE        [reduce using rule 12 (exp)]
    LT        [reduce using rule 12 (exp)]
    NEQ       [reduce using rule 12 (exp)]
    EQ        [reduce using rule 12 (exp)]
    MINUS     [reduce using rule 12 (exp)]
    PLUS      [reduce using rule 12 (exp)]
    DIVIDE    [reduce using rule 12 (exp)]
    TIMES     [reduce using rule 12 (exp)]
    ELSE      [reduce using rule 12 (exp)]
    $default  reduce using rule 12 (exp)


state 90

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   28    | WHILE exp DO exp .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    OR        [reduce using rule 28 (exp)]
    AND       [reduce using rule 28 (exp)]
    GE        [reduce using rule 28 (exp)]
    GT        [reduce using rule 28 (exp)]
    LE        [reduce using rule 28 (exp)]
    LT        [reduce using rule 28 (exp)]
    NEQ       [reduce using rule 28 (exp)]
    EQ        [reduce using rule 28 (exp)]
    MINUS     [reduce using rule 28 (exp)]
    PLUS      [reduce using rule 28 (exp)]
    DIVIDE    [reduce using rule 28 (exp)]
    TIMES     [reduce using rule 28 (exp)]
    $default  reduce using rule 28 (exp)


state 91

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   29    | FOR id ASSIGN exp . TO exp DO exp

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49
    TO      shift, and go to state 104


state 92

   55 fundec: FUNCTION id LPAREN . typefields RPAREN EQ exp
   56       | FUNCTION id LPAREN . typefields RPAREN COLON id EQ exp

    ID  shift, and go to state 1

    $default  reduce using rule 50 (typefields)

    typefields  go to state 105
    id          go to state 106


state 93

   51 vardec: VAR id ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 107
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 94

   52 vardec: VAR id COLON . id ASSIGN exp

    ID  shift, and go to state 1

    id  go to state 108


state 95

   44 tydec: TYPE id EQ . ty

    ID      shift, and go to state 1
    LBRACE  shift, and go to state 109
    ARRAY   shift, and go to state 110

    ty  go to state 111
    id  go to state 112


state 96

   10 exp: LET decs IN explist . END

    END  shift, and go to state 113


state 97

   63 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 63 (lvalue)


state 98

   65 args: exp COMMA . args

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    $default  reduce using rule 67 (args)

    exp      go to state 83
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    args     go to state 114
    id       go to state 20


state 99

   64 funcall: id LPAREN args RPAREN .

    $default  reduce using rule 64 (funcall)


state 100

   36 array: id LBRACK exp RBRACK . OF exp
   62 lvalue: id LBRACK exp RBRACK .

    OF  shift, and go to state 115

    $default  reduce using rule 62 (lvalue)


state 101

   32 record: id LBRACE refields RBRACE .

    $default  reduce using rule 32 (record)


state 102

   33 refields: id EQ . exp COMMA refields
   34         | id EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 116
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 103

   11 exp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 117
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 104

   29 exp: FOR id ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 118
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 105

   55 fundec: FUNCTION id LPAREN typefields . RPAREN EQ exp
   56       | FUNCTION id LPAREN typefields . RPAREN COLON id EQ exp

    RPAREN  shift, and go to state 119


state 106

   48 typefields: id . COLON id COMMA typefields
   49           | id . COLON id

    COLON  shift, and go to state 120


state 107

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   51 vardec: VAR id ASSIGN exp .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 51 (vardec)


state 108

   52 vardec: VAR id COLON id . ASSIGN exp

    ASSIGN  shift, and go to state 121


state 109

   46 ty: LBRACE . typefields RBRACE

    ID  shift, and go to state 1

    $default  reduce using rule 50 (typefields)

    typefields  go to state 122
    id          go to state 106


state 110

   47 ty: ARRAY . OF id

    OF  shift, and go to state 123


state 111

   44 tydec: TYPE id EQ ty .

    $default  reduce using rule 44 (tydec)


state 112

   45 ty: id .

    $default  reduce using rule 45 (ty)


state 113

   10 exp: LET decs IN explist END .

    $default  reduce using rule 10 (exp)


state 114

   65 args: exp COMMA args .

    $default  reduce using rule 65 (args)


state 115

   36 array: id LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 124
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 116

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   33 refields: id EQ exp . COMMA refields
   34         | id EQ exp .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49
    COMMA   shift, and go to state 125

    $default  reduce using rule 34 (refields)


state 117

   11 exp: IF exp THEN exp ELSE exp .
   13    | exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    OR        [reduce using rule 11 (exp)]
    AND       [reduce using rule 11 (exp)]
    GE        [reduce using rule 11 (exp)]
    GT        [reduce using rule 11 (exp)]
    LE        [reduce using rule 11 (exp)]
    LT        [reduce using rule 11 (exp)]
    NEQ       [reduce using rule 11 (exp)]
    EQ        [reduce using rule 11 (exp)]
    MINUS     [reduce using rule 11 (exp)]
    PLUS      [reduce using rule 11 (exp)]
    DIVIDE    [reduce using rule 11 (exp)]
    TIMES     [reduce using rule 11 (exp)]
    $default  reduce using rule 11 (exp)


state 118

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   29    | FOR id ASSIGN exp TO exp . DO exp

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49
    DO      shift, and go to state 126


state 119

   55 fundec: FUNCTION id LPAREN typefields RPAREN . EQ exp
   56       | FUNCTION id LPAREN typefields RPAREN . COLON id EQ exp

    EQ     shift, and go to state 127
    COLON  shift, and go to state 128


state 120

   48 typefields: id COLON . id COMMA typefields
   49           | id COLON . id

    ID  shift, and go to state 1

    id  go to state 129


state 121

   52 vardec: VAR id COLON id ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 130
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 122

   46 ty: LBRACE typefields . RBRACE

    RBRACE  shift, and go to state 131


state 123

   47 ty: ARRAY OF . id

    ID  shift, and go to state 1

    id  go to state 132


state 124

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   36 array: id LBRACK exp RBRACK OF exp .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    OR        [reduce using rule 36 (array)]
    AND       [reduce using rule 36 (array)]
    GE        [reduce using rule 36 (array)]
    GT        [reduce using rule 36 (array)]
    LE        [reduce using rule 36 (array)]
    LT        [reduce using rule 36 (array)]
    NEQ       [reduce using rule 36 (array)]
    EQ        [reduce using rule 36 (array)]
    MINUS     [reduce using rule 36 (array)]
    PLUS      [reduce using rule 36 (array)]
    DIVIDE    [reduce using rule 36 (array)]
    TIMES     [reduce using rule 36 (array)]
    $default  reduce using rule 36 (array)


state 125

   33 refields: id EQ exp COMMA . refields

    ID  shift, and go to state 1

    $default  reduce using rule 35 (refields)

    refields  go to state 133
    id        go to state 87


state 126

   29 exp: FOR id ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 134
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 127

   55 fundec: FUNCTION id LPAREN typefields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 135
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 128

   56 fundec: FUNCTION id LPAREN typefields RPAREN COLON . id EQ exp

    ID  shift, and go to state 1

    id  go to state 136


state 129

   48 typefields: id COLON id . COMMA typefields
   49           | id COLON id .

    COMMA  shift, and go to state 137

    $default  reduce using rule 49 (typefields)


state 130

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   52 vardec: VAR id COLON id ASSIGN exp .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 52 (vardec)


state 131

   46 ty: LBRACE typefields RBRACE .

    $default  reduce using rule 46 (ty)


state 132

   47 ty: ARRAY OF id .

    $default  reduce using rule 47 (ty)


state 133

   33 refields: id EQ exp COMMA refields .

    $default  reduce using rule 33 (refields)


state 134

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   29    | FOR id ASSIGN exp TO exp DO exp .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    OR        [reduce using rule 29 (exp)]
    AND       [reduce using rule 29 (exp)]
    GE        [reduce using rule 29 (exp)]
    GT        [reduce using rule 29 (exp)]
    LE        [reduce using rule 29 (exp)]
    LT        [reduce using rule 29 (exp)]
    NEQ       [reduce using rule 29 (exp)]
    EQ        [reduce using rule 29 (exp)]
    MINUS     [reduce using rule 29 (exp)]
    PLUS      [reduce using rule 29 (exp)]
    DIVIDE    [reduce using rule 29 (exp)]
    TIMES     [reduce using rule 29 (exp)]
    $default  reduce using rule 29 (exp)


state 135

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   55 fundec: FUNCTION id LPAREN typefields RPAREN EQ exp .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 55 (fundec)


state 136

   56 fundec: FUNCTION id LPAREN typefields RPAREN COLON id . EQ exp

    EQ  shift, and go to state 138


state 137

   48 typefields: id COLON id COMMA . typefields

    ID  shift, and go to state 1

    $default  reduce using rule 50 (typefields)

    typefields  go to state 139
    id          go to state 106


state 138

   56 fundec: FUNCTION id LPAREN typefields RPAREN COLON id EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp      go to state 140
    seq      go to state 15
    record   go to state 16
    array    go to state 17
    lvalue   go to state 18
    funcall  go to state 19
    id       go to state 20


state 139

   48 typefields: id COLON id COMMA typefields .

    $default  reduce using rule 48 (typefields)


state 140

   13 exp: exp . PLUS exp
   14    | exp . MINUS exp
   15    | exp . TIMES exp
   16    | exp . DIVIDE exp
   17    | exp . EQ exp
   19    | exp . NEQ exp
   20    | exp . GT exp
   21    | exp . LT exp
   22    | exp . GE exp
   23    | exp . LE exp
   24    | exp . AND exp
   25    | exp . OR exp
   56 fundec: FUNCTION id LPAREN typefields RPAREN COLON id EQ exp .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    GE      shift, and go to state 40
    GT      shift, and go to state 41
    LE      shift, and go to state 42
    LT      shift, and go to state 43
    NEQ     shift, and go to state 44
    EQ      shift, and go to state 45
    MINUS   shift, and go to state 46
    PLUS    shift, and go to state 47
    DIVIDE  shift, and go to state 48
    TIMES   shift, and go to state 49

    $default  reduce using rule 56 (fundec)
